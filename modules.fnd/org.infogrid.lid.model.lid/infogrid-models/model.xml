<?xml version="1.0" encoding="UTF-8"?>
<!--
    This file is part of InfoGrid(tm). You may not use this file except in
    compliance with the InfoGrid license. The InfoGrid license and important
    disclaimers are contained in the file LICENSE.InfoGrid.txt that you should
    have received with InfoGrid. If you have not received LICENSE.InfoGrid.txt
    or you do not consent to all aspects of the license and the disclaimers,
    no license is granted; do not use this file.
 
    For more information about InfoGrid go to http://infogrid.org/

    Copyright 1998-2008 by R-Objects Inc. dba NetMesh Inc., Johannes Ernst
    All rights reserved.
-->

<!DOCTYPE model PUBLIC '-//InfoGrid.org//InfoGrid Model//EN' 'http://infogrid.org/dtds/model.dtd'>
<model>
    <subjectarea ID="org.infogrid.lid.model.lid">
        <name>org.infogrid.lid.model.lid</name>
        <username>LID Subject Area</username>
        <userdescription>The concepts defined by LID that aren't defined anywhere else.</userdescription>

        <dependson>
            <subjectareareference>
                <name>org.infogrid.lid.model.yadis</name>
            </subjectareareference>
            <modulereference>
                <name>org.infogrid.lid</name>
            </modulereference>
        </dependson>

        <entitytype ID="org.infogrid.lid.model.lid#IdentityProvider">
            <name>IdentityProvider</name>
            <username>Identity Provider</username>
            <userdescription>A MeshObject that is an Identity Provider. It generally offers one or more
Authentication Services.</userdescription>
            <supertype>org.infogrid.model.Web#WebResource</supertype>

            <propertytype ID="org.infogrid.lid.model.lid#IdentityProvider/RequiresUserSpecificSecret">
                <name>RequiresUserSpecificSecret</name>
                <username>RequiresUserSpecificSecret</username>
                <userdescription>True if this Identity Provider requires a user-specific secret to authenticate users.
This could be a password, or a hardware token, but not a client certificate.</userdescription>
                <datatype>
                    <BooleanDataType/>
                </datatype>
                <isoptional/>
            </propertytype>

            <propertytype ID="org.infogrid.lid.model.lid#IdentityProvider/RequiresHardwareToken">
                <name>RequiresHardwareToken</name>
                <username>RequiresHardwareToken</username>
                <userdescription>True if this Identity Provider requires a hardware token to authenticate users.</userdescription>
                <datatype>
                    <BooleanDataType/>
                </datatype>
                <isoptional/>
            </propertytype>

            <propertytype ID="org.infogrid.lid.model.lid#IdentityProvider/RequiresEncryptedCommunications">
                <name>RequiresEncryptedCommunications</name>
                <username>RequiresEncryptedCommunications</username>
                <userdescription>True if this Identity Provider requires that all secrets are exchanged in encrypted form
                     between itself and its users.</userdescription>
                <datatype>
                    <BooleanDataType/>
                </datatype>
                <isoptional/>
            </propertytype>
         </entitytype>

        <entitytype ID="org.infogrid.lid.model.lid#RelyingParty">
            <name>RelyingParty</name>
            <username>Relying Party</username>
            <userdescription>A MeshObject that can accept externally provided identities. It generally provides one or
more RelyingPartyServices.</userdescription>
            <supertype>org.infogrid.lid.model.yadis#XrdsService</supertype>
            
            <propertytype ID="org.infogrid.lid.model.lid#RelyingParty/RequiresUserSpecificSecret">
                <name>RequiresUserSpecificSecret</name>
                <username>RequiresUserSpecificSecret</username>
                <userdescription>True if this Relying Party only trusts Identity Providers that require a
user-specific secret to authenticate users.
This could be a password, or a hardware token, but not a client certificate.</userdescription>
                <datatype>
                    <BooleanDataType/>
                </datatype>
                <isoptional/>
            </propertytype>

            <propertytype ID="org.infogrid.lid.model.lid#RelyingParty/RequiresHardwareToken">
                <name>RequiresHardwareToken</name>
                <username>RequiresHardwareToken</username>
                <userdescription>True if this Relying Party only trusts Identity Providers that require
a hardware token to authenticate users.</userdescription>
                <datatype>
                    <BooleanDataType/>
                </datatype>
                <isoptional/>
            </propertytype>

            <propertytype ID="org.infogrid.lid.model.lid#RelyingParty/RequiresEncryptedCommunications">
                <name>RequiresEncryptedCommunications</name>
                <username>RequiresEncryptedCommunications</username>
                <userdescription>True if this Relying Party only trusts Identity Providers that require that
all secrets are exchanged in encrypted form.</userdescription>
                <datatype>
                    <BooleanDataType/>
                </datatype>
                <isoptional/>
            </propertytype>
        </entitytype>

<!--
        <entitytype ID="org.infogrid.lid.model.lid#Principal">
            <name>Principal</name>
            <userdescription>A MeshObject that represents an pricipal, such as a user. It generally makes use of
one or more Yadis Services.</userdescription>
            <supertype>org.infogrid.lid.model.yadis#XrdsService</supertype>
            <additionalinterface>org.infogrid.lid.LidPersona</additionalinterface>
            <implementsMethod><![CDATA[
    /**
     * Determine whether this LidPersona is hosted locally or remotely.
     *
     * @return true if the LidPersona is hosted locally
     */
    public boolean isHostedLocally()
    {
        // look at the identifier
        String myId   = getIdentifier().toExternalForm();
        String baseId = getMeshBase().getIdentifier().toExternalForm();

        boolean ret = myId.startsWith( baseId );
        return ret;
    }
           ]]></implementsMethod>
           <implementsMethod><![CDATA[
    /**
     * Obtain an attribute of the persona.
     *
     * @param key the name of the attribute
     * @return the value of the attribute, or null
     */
    public String getAttribute(
            String key )
    {
        org.infogrid.modelbase.ModelBase modelBase
                = get_Delegate().getMeshBase().getModelBase();
        org.infogrid.model.primitives.MeshTypeIdentifier typeId
                = modelBase.getMeshTypeIdentifierFactory().fromExternalForm( key );

        org.infogrid.model.primitives.PropertyType  type   = null;
        org.infogrid.model.primitives.PropertyValue almost = null;

        try {
            type   = modelBase.findPropertyTypeByIdentifier( typeId );
            almost = get_Delegate().getPropertyValue( type );

        } catch( org.infogrid.mesh.NotPermittedException ex ) {
            // simply treat it as null
        } catch( org.infogrid.modelbase.MeshTypeWithIdentifierNotFoundException ex ) {
            // simply treat it as null
        } catch( org.infogrid.mesh.IllegalPropertyTypeException ex ) {
            // simply treat it as null
        }

        String ret;
        if( almost != null ) {
            ret = almost.toString();
        } else {
            ret = null;
        }
        return null;
    }
          ]]></implementsMethod>
            <implementsMethod><![CDATA[
    /**
     * Get the set of keys into the set of attributes.
     *
     * @return the keys into the set of attributes
     */
    public java.util.Set<String> getAttributeKeys()
    {
        return getAttributes().keySet();
    }

          ]]></implementsMethod>
            <implementsMethod><![CDATA[
    /**
     * Obtain the map of attributes. This breaks encapsulation, but works much better
     * for JSP pages.
     *
     * @return the map of attributes
     */
    public java.util.Map<String,String> getAttributes()
    {
        org.infogrid.model.primitives.PropertyType [] types = get_Delegate().getAllPropertyTypes();
        java.util.HashMap<String,String>              ret   = new java.util.HashMap<String,String>();

        for( org.infogrid.model.primitives.PropertyType key : types ) {
            try {
                org.infogrid.model.primitives.PropertyValue value = get_Delegate().getPropertyValue( key );
                String stringValue = value != null ? value.toString() : null;

                ret.put( key.getIdentifier().toExternalForm(), stringValue );

            } catch( org.infogrid.mesh.NotPermittedException ex ) {
                log.error( ex );
            } catch( org.infogrid.mesh.IllegalPropertyTypeException ex ) {
                log.error( ex );
            }
        }
        return ret;
    }

          ]]></implementsMethod>
            <implementsMethod><![CDATA[
    /**
     * Perform a check of the validity of a presented credential.
     *
     * @param credType the LidCredentialType to check
     * @param request the incoming request carrying the presented credential
     * @throws org.infogrid.lid.credential.LidInvalidCredentialException thrown if the credential was invalid
     */
    public void checkCredential(
            org.infogrid.lid.credential.LidCredentialType credType,
            org.infogrid.util.http.SaneRequest            request )
        throws
            org.infogrid.lid.credential.LidInvalidCredentialException
    {
        throw new UnsupportedOperationException( "FIXME" );
    }
          ]]></implementsMethod>

            <implementsMethod><![CDATA[
    /**
     * Obtain the credential types available.
     *
     * @return the credential types
     */
    public java.util.Set<org.infogrid.lid.credential.LidCredentialType> getCredentialTypes()
    {
        throw new UnsupportedOperationException( "FIXME" );
    }
          ]]></implementsMethod>
        </entitytype>
    -->
        <entitytype ID="org.infogrid.lid.model.lid#AuthenticationService">
            <name>AuthenticationService</name>
            <userdescription>A Yadis Service that is able to authenticate a principal. More specific subclasses
are provided for specific authentication protocols.</userdescription>
            <supertype>org.infogrid.lid.model.yadis#XrdsService</supertype>
            <isabstract/>
        </entitytype>

        <entitytype ID="org.infogrid.lid.model.lid#WebAuthenticationService">
            <name>WebAuthenticationService</name>
            <userdescription>An AuthenticationService that uses a standard web browser as the client device,
and thus implements the redirect dance. More specific subclasses
are provided for specific authentication protocols.</userdescription>
            <supertype>org.infogrid.lid.model.lid#AuthenticationService</supertype>
            <isabstract/>
            <declaresMethod>
    public abstract String determineRedirectUrl(
            MeshObject                        principal,
            String                            return_to,
            String                            realm,
            org.infogrid.util.context.Context context )
        throws
            org.infogrid.mesh.NotPermittedException,
            org.infogrid.util.FactoryException;
            </declaresMethod>
        </entitytype>

        <entitytype ID="org.infogrid.lid.model.lid#LidGpgSso">
            <name>LidGpgSso</name>
            <username>LID's GPG-based Authentication Service</username>
            <userdescription>This represents a LID GPG-based Authentication Service in any version.</userdescription>
            <supertype>org.infogrid.lid.model.lid#WebAuthenticationService</supertype>
            <isabstract/>
            <synonym>http://lid.netmesh.org/sso</synonym>
        </entitytype>        

        <entitytype ID="org.infogrid.lid.model.lid#LidGpgSso2">
            <name>LidGpgSso2</name>
            <username>LID's GPG-based Authentication Service (version 2)</username>
            <userdescription>An Authentication Service based on the LID GPG SSO service, version 2.</userdescription>
            <supertype>org.infogrid.lid.model.lid#LidGpgSso</supertype>
            <implementsMethod><![CDATA[
    public String determineRedirectUrl(
            MeshObject                        principal,
            String                            return_to,
            String                            realm,
            org.infogrid.util.context.Context context )
    {
        org.infogrid.mesh.set.OrderedMeshObjectSet endpoints
                = org.infogrid.lid.model.yadis.util.YadisUtil.determineOrderedEndpoints( the_Delegate );
        if( endpoints.isEmpty() ) {
            return null;
        }
        MeshObject selectedEndpoint = endpoints.get(0);
        String     endpointUrl      = selectedEndpoint.getIdentifier().toExternalForm();

        String ret = endpointUrl;

        String target = org.infogrid.util.http.HTTP.appendArgumentPairToUrl( return_to, "lid-credtype=gpg%20--clearsign" );

        ret = org.infogrid.util.http.HTTP.appendArgumentPairToUrl( ret, "lid-action=sso-approve" );
        ret = org.infogrid.util.http.HTTP.appendArgumentToUrl(     ret, "lid-target", target.toString() );

        return ret;
    }
          ]]></implementsMethod>
          <synonym>http://lid.netmesh.org/sso/2.0</synonym>
        </entitytype>

        <entitytype ID="org.infogrid.lid.model.lid#MinimumLid2">
            <name>MinimumLid2</name>
            <username>Minimum LID (version 2)</username>
            <supertype>org.infogrid.lid.model.yadis#XrdsService</supertype>
            <synonym>http://lid.netmesh.org/minimum-lid/2.0</synonym>
        </entitytype>

        <entitytype ID="org.infogrid.lid.model.lid#RelyingPartyService">
            <name>RelyingPartyService</name>
            <userdescription>A Yadis Service that is able to accept authentication assertions. More specific subclasses
are provided for specific protocols.</userdescription>
            <supertype>org.infogrid.lid.model.yadis#XrdsService</supertype>
        </entitytype>

        <entitytype ID="org.infogrid.lid.model.lid#LidGpgRelyingParty">
            <name>LidGpgRelyingParty</name>
            <username>LID's GPG-based Relying Party Service</username>
            <userdescription>This represents a LID GPG-based Relying Party Service in any version.</userdescription>
            <supertype>org.infogrid.lid.model.lid#RelyingPartyService</supertype>
            <isabstract/>
            <synonym>http://lid.netmesh.org/relying-party</synonym>
        </entitytype>

        <entitytype ID="org.infogrid.lid.model.lid#LidGpgRelyingParty2">
            <name>LidGpgRelyingParty2</name>
            <username>LID's GPG-based Relying Party Service (version 2)</username>
            <userdescription>A LID GPG-based Relying Party Service based on the LID GPG SSO service, version 2.</userdescription>
            <supertype>org.infogrid.lid.model.lid#LidGpgRelyingParty</supertype>
            <synonym>http://lid.netmesh.org/relying-party/2.0</synonym>
        </entitytype>

        <entitytype ID="org.infogrid.lid.model.lid#HardwareTokenRelyingParty">
            <name>HardwareTokenRelyingParty</name>
            <username>Hardware token-based Relying Party</username>
            <userdescription>This represents a Relying Party that accepts hardware tokens.</userdescription>
            <supertype>org.infogrid.lid.model.lid#RelyingPartyService</supertype>
        </entitytype>

        <entitytype ID="org.infogrid.lid.model.lid#SimpleUserPasswordRelyingParty">
            <name>SimpleUserPasswordRelyingParty</name>
            <username>Username/password-based Relying Party</username>
            <userdescription>This represents a Relying Party that accepts usernames and passwords.</userdescription>
            <supertype>org.infogrid.lid.model.lid#RelyingPartyService</supertype>
        </entitytype>
    </subjectarea>
</model>
