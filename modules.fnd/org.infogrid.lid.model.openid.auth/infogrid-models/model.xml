<?xml version="1.0" encoding="UTF-8"?>
<!--
    This file is part of InfoGrid(tm). You may not use this file except in
    compliance with the InfoGrid license. The InfoGrid license and important
    disclaimers are contained in the file LICENSE.InfoGrid.txt that you should
    have received with InfoGrid. If you have not received LICENSE.InfoGrid.txt
    or you do not consent to all aspects of the license and the disclaimers,
    no license is granted; do not use this file.
 
    For more information about InfoGrid go to http://infogrid.org/

    Copyright 1998-2008 by R-Objects Inc. dba NetMesh Inc., Johannes Ernst
    All rights reserved.
-->

<!DOCTYPE model PUBLIC '-//InfoGrid.org//InfoGrid Model//EN' 'http://infogrid.org/dtds/model.dtd'>
<model>
    <subjectarea ID="org.infogrid.lid.model.openid.auth">
        <name>org.infogrid.lid.model.openid.auth</name>
        <username>OpenID Authentication Subject Area</username>
        <userdescription>The concepts defined by OpenID Authentication.</userdescription>

        <dependson>
            <subjectareareference>
                <name>org.infogrid.lid.model.yadis</name>
            </subjectareareference>
            <subjectareareference>
                <name>org.infogrid.lid.model.lid</name>
            </subjectareareference>
        </dependson>

        <entitytype ID="org.infogrid.lid.model.openid.auth#AuthenticationService">
            <name>AuthenticationService</name>
            <username>OpenID Authentication Service</username>
            <userdescription>This represents an OpenID Authentication Service in any version.</userdescription>
            <supertype>org.infogrid.lid.model.lid#WebAuthenticationService</supertype>
            <isabstract/>
            <synonym>http://openid.net/signon/</synonym>
            
            <propertytype ID="org.infogrid.lid.model.openid.auth#AuthenticationService/Delegate">
                <name>Delegate</name>
                <username>Delegate</username>
                <userdescription>The delegate identifier.</userdescription>
                <datatype>
                    <StringDataType/>
                </datatype>
                <isoptional/>
            </propertytype>
        </entitytype>        

        <entitytype ID="org.infogrid.lid.model.openid.auth#Authentication1Service">
            <name>Authentication1Service</name>
            <username>OpenID Authentication Service (version 1)</username>
            <userdescription>This represents an OpenID Authentication Service (version 1)</userdescription>
            <supertype>org.infogrid.lid.model.openid.auth#AuthenticationService</supertype>
            <isabstract/>
        </entitytype>        

        <entitytype ID="org.infogrid.lid.model.openid.auth#Authentication1_0Service">
            <name>Authentication1_0Service</name>
            <username>OpenID Authentication Service (version 1.0)</username>
            <userdescription>This represents an OpenID Authentication Service (version 1.0)</userdescription>
            <supertype>org.infogrid.lid.model.openid.auth#AuthenticationService</supertype>
            <implementsMethod><![CDATA[
    public String determineRedirectUrl(
            MeshObject                        principal,
            String                            here,
            String                            trustRoot,
            org.infogrid.util.context.Context context )
        throws
            org.infogrid.mesh.NotPermittedException,
            org.infogrid.util.FactoryException
    {
        org.infogrid.lid.openid.OpenIdRpSideAssociationManager assocMgr
                = context.findContextObjectOrThrow(
                        org.infogrid.lid.openid.OpenIdRpSideAssociationManager.class );
                        
        org.infogrid.lid.LidNonceManager nonceMgr
                = context.findContextObjectOrThrow(
                        org.infogrid.lid.LidNonceManager.class );

        org.infogrid.mesh.set.MeshObjectSet endpoints = traverse(
                org.infogrid.lid.model.yadis.YadisSubjectArea.XRDSSERVICE_ISPROVIDEDATENDPOINT_WEBRESOURCE.getSource() );
        if( endpoints.isEmpty() ) {
            return null;
        }

        // FIXME, should use more complex selection algorithm
        MeshObject selectedEndpoint = endpoints.getMeshObjects()[0];
        String     endpointUrl      = selectedEndpoint.getIdentifier().toExternalForm();
        String     theDelegate      = getDelegate() != null ? getDelegate().value() : null;
        String     theUrl           = principal.getIdentifier().toExternalForm();

        if( trustRoot == null ) {
            trustRoot = here;
        }

        StringBuilder ret = new StringBuilder();
        ret.append( org.infogrid.util.http.HTTP.appendArgumentToUrl( endpointUrl, "openid.mode=checkid_setup" ));
        if( theDelegate != null ) {
            ret.append( "&openid.identity=" ).append( org.infogrid.util.http.HTTP.encodeToValidUrlArgument( theDelegate ));
        } else {
            ret.append( "&openid.identity=" ).append( org.infogrid.util.http.HTTP.encodeToValidUrlArgument( theUrl ));
        }

        // add a nonce to the return-to URL
        String nonce = nonceMgr.generateNewNonce();
            
        here = org.infogrid.util.http.HTTP.appendArgumentToUrl( here, "lid-nonce=" + org.infogrid.util.http.HTTP.encodeToValidUrlArgument( nonce ));

        ret.append( "&openid.return_to="  ).append( org.infogrid.util.http.HTTP.encodeToValidUrlArgument( here ));
        ret.append( "&openid.trust_root=" ).append( org.infogrid.util.http.HTTP.encodeToValidUrlArgument( trustRoot ));

        org.infogrid.lid.openid.OpenIdRpSideAssociation association = assocMgr.obtainFor( endpointUrl );
                // may throw exception

        if( association != null ) {
            ret.append( "&openid.assoc_handle=" ).append( org.infogrid.util.http.HTTP.encodeToValidUrlArgument( association.getAssociationHandle() ));
        }
        return ret.toString();
    }        
          ]]></implementsMethod>
          <synonym>http://openid.net/signon/1.0</synonym>
        </entitytype>

        <entitytype ID="org.infogrid.lid.model.openid.auth#Authentication1_1Service">
            <name>Authentication1_1Service</name>
            <username>OpenID Authentication Service (version 1.1)</username>
            <userdescription>This represents an OpenID Authentication Service (version 1.1)</userdescription>
            <supertype>org.infogrid.lid.model.openid.auth#AuthenticationService</supertype>
            <implementsMethod><![CDATA[
    public String determineRedirectUrl(
            MeshObject                        principal,
            String                            here,
            String                            trustRoot,
            org.infogrid.util.context.Context context )
        throws
            org.infogrid.mesh.NotPermittedException,
            org.infogrid.util.FactoryException
    {
        org.infogrid.lid.openid.OpenIdRpSideAssociationManager assocMgr
                = context.findContextObjectOrThrow(
                        org.infogrid.lid.openid.OpenIdRpSideAssociationManager.class );
                        
        org.infogrid.lid.LidNonceManager nonceMgr
                = (org.infogrid.lid.LidNonceManager) context.findContextObjectOrThrow(
                        org.infogrid.lid.LidNonceManager.class );

        org.infogrid.mesh.set.MeshObjectSet endpoints = traverse(
                org.infogrid.lid.model.yadis.YadisSubjectArea.XRDSSERVICE_ISPROVIDEDATENDPOINT_WEBRESOURCE.getSource() );
        if( endpoints.isEmpty() ) {
            return null;
        }

        // FIXME, should use more complex selection algorithm
        MeshObject selectedEndpoint = endpoints.getMeshObjects()[0];
        String     endpointUrl      = selectedEndpoint.getIdentifier().toExternalForm();
        String     theDelegate      = getDelegate() != null ? getDelegate().value() : null;
        String     theUrl           = principal.getIdentifier().toExternalForm();

        if( trustRoot == null ) {
            trustRoot = here;
        }

        StringBuilder ret = new StringBuilder();
        ret.append( org.infogrid.util.http.HTTP.appendArgumentToUrl( endpointUrl, "openid.mode=checkid_setup" ));
        if( theDelegate != null ) {
            ret.append( "&openid.identity=" ).append( org.infogrid.util.http.HTTP.encodeToValidUrlArgument( theDelegate ));
        } else {
            ret.append( "&openid.identity=" ).append( org.infogrid.util.http.HTTP.encodeToValidUrlArgument( theUrl ));
        }

        // add a nonce to the return-to URL
        String nonce = nonceMgr.generateNewNonce();
            
        here = org.infogrid.util.http.HTTP.appendArgumentToUrl( here, "lid-nonce=" + org.infogrid.util.http.HTTP.encodeToValidUrlArgument( nonce ));

        ret.append( "&openid.return_to="  ).append( org.infogrid.util.http.HTTP.encodeToValidUrlArgument( here ));
        ret.append( "&openid.trust_root=" ).append( org.infogrid.util.http.HTTP.encodeToValidUrlArgument( trustRoot ));

        org.infogrid.lid.openid.OpenIdRpSideAssociation association = assocMgr.obtainFor( endpointUrl );
                // may throw exception

        if( association != null ) {
            ret.append( "&openid.assoc_handle=" ).append( org.infogrid.util.http.HTTP.encodeToValidUrlArgument( association.getAssociationHandle() ));
        }
        return ret.toString();
    }        
          ]]></implementsMethod>
          <synonym>http://openid.net/signon/1.1</synonym>
        </entitytype>

        <entitytype ID="org.infogrid.lid.model.openid.auth#Authentication2Service">
            <name>Authentication2Service</name>
            <username>OpenID Authentication Service (version 2)</username>
            <userdescription>This represents an OpenID Authentication Service (version 2)</userdescription>
            <supertype>org.infogrid.lid.model.openid.auth#AuthenticationService</supertype>
            <implementsMethod><![CDATA[
    public String determineRedirectUrl(
            MeshObject                        principal,
            String                            here,
            String                            trustRoot,
            org.infogrid.util.context.Context context )
        throws
            org.infogrid.mesh.NotPermittedException,
            org.infogrid.util.FactoryException
    {
        throw new UnsupportedOperationException();
    }
          ]]></implementsMethod>
          <synonym>http://specs.openid.net/auth/2.0/signon</synonym>
        </entitytype>

        
        <entitytype ID="org.infogrid.lid.model.openid.auth#RelyingPartyService">
            <name>RelyingPartyService</name>
            <username>OpenID Relying Party Service</username>
            <userdescription>This service is provided by OpenID RelyingParties in any version.</userdescription>
            <supertype>org.infogrid.lid.model.lid#RelyingPartyService</supertype>
            <synonym>http://specs.openid.net/auth/return_to</synonym>
        </entitytype>
        
        <entitytype ID="org.infogrid.lid.model.openid.auth#RelyingParty1Service">
            <name>RelyingParty1Service</name>
            <username>OpenID Relying Party Service (version 1)</username>
            <userdescription>This service is provided by OpenID RelyingParties (version 1)</userdescription>
            <supertype>org.infogrid.lid.model.openid.auth#RelyingPartyService</supertype>
            <synonym>http://specs.openid.net/auth/1.0/return_to</synonym>
        </entitytype>

        <entitytype ID="org.infogrid.lid.model.openid.auth#RelyingParty1_1Service">
            <name>RelyingParty1_1Service</name>
            <username>OpenID Relying Party Service (version 1.1)</username>
            <userdescription>This service is provided by OpenID RelyingParties (version 1.1)</userdescription>
            <supertype>org.infogrid.lid.model.openid.auth#RelyingPartyService</supertype>
            <synonym>http://specs.openid.net/auth/1.1/return_to</synonym>
        </entitytype>

        <entitytype ID="org.infogrid.lid.model.openid.auth#RelyingParty2Service">
            <name>RelyingParty2Service</name>
            <username>OpenID Relying Party Service (version 2)</username>
            <userdescription>This service is provided by OpenID RelyingParties (version 2)</userdescription>
            <supertype>org.infogrid.lid.model.openid.auth#RelyingPartyService</supertype>
            <synonym>http://specs.openid.net/auth/2.0/return_to</synonym>
        </entitytype>
    </subjectarea>
</model>
